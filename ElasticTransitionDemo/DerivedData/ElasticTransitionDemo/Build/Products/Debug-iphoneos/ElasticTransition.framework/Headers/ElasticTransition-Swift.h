// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
@import Foundation;
@import QuartzCore;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIViewController;
@class UIPanGestureRecognizer;
@protocol UIViewControllerContextTransitioning;
@class UINavigationController;

SWIFT_CLASS("_TtC17ElasticTransition17EdgePanTransition")
@interface EdgePanTransition : NSObject <UINavigationControllerDelegate, UIViewControllerTransitioningDelegate, UIViewControllerInteractiveTransitioning, UIViewControllerAnimatedTransitioning>
@property (nonatomic) CGFloat panThreshold;
- (void)startInteractiveTransition:(UIViewController * __nonnull)fromViewController segueIdentifier:(NSString * __nonnull)identifier gestureRecognizer:(UIPanGestureRecognizer * __nonnull)pan;
- (void)startInteractiveTransition:(UIViewController * __nonnull)fromViewController toViewController:(UIViewController * __nonnull)toViewController gestureRecognizer:(UIPanGestureRecognizer * __nonnull)pan;
- (void)dissmissInteractiveTransition:(UIViewController * __nonnull)viewController gestureRecognizer:(UIPanGestureRecognizer * __nonnull)pan completion:(void (^ __nullable)(void))completion;
- (void)animateTransition:(id <UIViewControllerContextTransitioning> __nonnull)transitionContext;
- (void)startInteractiveTransition:(id <UIViewControllerContextTransitioning> __nonnull)transitionContext;
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> __nullable)transitionContext;
- (id <UIViewControllerAnimatedTransitioning> __nullable)animationControllerForPresentedController:(UIViewController * __nonnull)presented presentingController:(UIViewController * __nonnull)presenting sourceController:(UIViewController * __nonnull)source;
- (id <UIViewControllerAnimatedTransitioning> __nullable)animationControllerForDismissedController:(UIViewController * __nonnull)dismissed;
- (id <UIViewControllerInteractiveTransitioning> __nullable)interactionControllerForPresentation:(id <UIViewControllerAnimatedTransitioning> __nonnull)animator;
- (id <UIViewControllerInteractiveTransitioning> __nullable)interactionControllerForDismissal:(id <UIViewControllerAnimatedTransitioning> __nonnull)animator;
- (id <UIViewControllerInteractiveTransitioning> __nullable)navigationController:(UINavigationController * __nonnull)navigationController interactionControllerForAnimationController:(id <UIViewControllerAnimatedTransitioning> __nonnull)animationController;
- (id <UIViewControllerAnimatedTransitioning> __nullable)navigationController:(UINavigationController * __nonnull)navigationController animationControllerForOperation:(UINavigationControllerOperation)operation fromViewController:(UIViewController * __nonnull)fromVC toViewController:(UIViewController * __nonnull)toVC;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP17ElasticTransition29ElasticMenuTransitionDelegate_")
@protocol ElasticMenuTransitionDelegate
@optional
@property (nonatomic, readonly) CGFloat contentLength;
@property (nonatomic, readonly) BOOL dismissByBackgroundTouch;
@property (nonatomic, readonly) BOOL dismissByBackgroundDrag;
@property (nonatomic, readonly) BOOL dismissByForegroundDrag;
@end

@class NSCoder;

SWIFT_CLASS("_TtC17ElasticTransition17ElasticShapeLayer")
@interface ElasticShapeLayer : CAShapeLayer
@property (nonatomic) CGPoint dragPoint;
@property (nonatomic) CGFloat radiusFactor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id __nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;
@class UIView;
@class UIGestureRecognizer;
@class UITouch;

SWIFT_CLASS("_TtC17ElasticTransition17ElasticTransition")
@interface ElasticTransition : EdgePanTransition <UIGestureRecognizerDelegate>

/// The curvature of the elastic edge.
///
/// lower radiusFactor means higher curvature
/// value is clamped between 0 to 0.5
@property (nonatomic) CGFloat radiusFactor;

/// Determines whether or not the view edge will stick to the initial position when dragged.
///
/// <em>Only effective when doing a interactive transition</em>
@property (nonatomic) BOOL sticky;

/// The background color of the container when doing the transition
///
/// default:
///
/// <code>UIColor(red: 152/255, green: 174/255, blue: 196/255, alpha: 1.0)
/// 
/// </code>
@property (nonatomic, strong) UIColor * __nonnull containerColor;

/// The color of the overlay when doing the transition
///
/// default:
///
/// <code>UIColor(red: 152/255, green: 174/255, blue: 196/255, alpha: 0.5)
/// 
/// </code>
@property (nonatomic, strong) UIColor * __nonnull overlayColor;

/// Whether or not to display the shadow. Will decrease performance.
///
/// default: false
@property (nonatomic) BOOL showShadow;

/// The shadow color of the container when doing the transition
///
/// default:
///
/// <code>UIColor(red: 100/255, green: 122/255, blue: 144/255, alpha: 1.0)
/// 
/// </code>
@property (nonatomic, strong) UIColor * __nonnull shadowColor;

/// The shadow color of the container when doing the transition
///
/// default:
///
/// <code>UIColor(red: 100/255, green: 122/255, blue: 144/255, alpha: 1.0)
/// 
/// </code>
@property (nonatomic, strong) UIColor * __nullable frontViewBackgroundColor;

/// The shadow radius of the container when doing the transition
///
/// default:
///
/// <code>50
/// 
/// </code>
@property (nonatomic) CGFloat shadowRadius;
@property (nonatomic, copy) void (^ __nullable transform)(CGFloat, UIView * __nonnull);
@property (nonatomic) BOOL useTranlation;
@property (nonatomic) CGFloat damping;
@property (nonatomic) CGFloat stiffness;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * __nonnull)gestureRecognizer;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * __nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * __nonnull)touch;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> __nullable)transitionContext;
@end

#pragma clang diagnostic pop
