// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC15MotionAnimation22LZPanGestureRecognizer")
@interface LZPanGestureRecognizer : UIPanGestureRecognizer
@property (nonatomic, readonly) CGPoint translatedViewCenterPoint;
@property (nonatomic) CGFloat xOverflowScale;
@property (nonatomic) CGFloat yOverflowScale;
- (void)touchesBegan:(NSSet<UITouch *> * __nonnull)touches withEvent:(UIEvent * __nonnull)event;
- (nonnull instancetype)initWithTarget:(id __nullable)target action:(SEL __null_unspecified)action OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15MotionAnimation15MotionAnimation")
@interface MotionAnimation : NSObject
@property (nonatomic, copy) void (^ __nullable onCompletion)(MotionAnimation * __nonnull);
@property (nonatomic, copy) void (^ __nullable onUpdate)(MotionAnimation * __nonnull);
@property (nonatomic, readonly) BOOL playing;
- (void)addChildBehavior:(MotionAnimation * __nonnull)b;
- (void)play;
- (void)stop;
- (BOOL)update:(CGFloat)dt;
@end

@protocol MotionAnimatorObserver;
@class NSUUID;

SWIFT_CLASS("_TtC15MotionAnimation14MotionAnimator")
@interface MotionAnimator : NSObject
+ (MotionAnimator * __nonnull)sharedInstance;
@property (nonatomic) BOOL debugEnabled;
- (NSUUID * __nonnull)addUpdateObserver:(id <MotionAnimatorObserver> __nonnull)observer;
- (id <MotionAnimatorObserver> __nullable)observerWithKey:(NSUUID * __nonnull)observerKey;
- (void)removeUpdateObserverWithKey:(NSUUID * __nonnull)observerKey;
- (void)addAnimation:(MotionAnimation * __nonnull)b;
- (BOOL)hasAnimation:(MotionAnimation * __nonnull)b;
- (void)removeAnimation:(MotionAnimation * __nonnull)b;
@end


SWIFT_PROTOCOL("_TtP15MotionAnimation22MotionAnimatorObserver_")
@protocol MotionAnimatorObserver
- (void)animatorDidUpdate:(MotionAnimator * __nonnull)animator dt:(CGFloat)dt;
@end

@class ValueAnimation;

SWIFT_CLASS("_TtC15MotionAnimation19MultiValueAnimation")
@interface MultiValueAnimation : MotionAnimation
@property (nonatomic, copy) NSArray<NSNumber *> * __nonnull (^ __nullable getter)(void);
@property (nonatomic, copy) void (^ __nullable setter)(NSArray<NSNumber *> * __nonnull);
@property (nonatomic, copy) NSArray<NSNumber *> * __nonnull target;
- (void)loop:(void (^ __nonnull)(ValueAnimation * __nonnull, NSInteger))cb;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * __nonnull velocity;
@property (nonatomic, copy) NSArray<NSNumber *> * __nonnull current;
- (BOOL)update:(CGFloat)dt;
- (nonnull instancetype)initWithAnimationFactory:(ValueAnimation * __nonnull (^ __nonnull)(void))animationFactory getter:(NSArray<NSNumber *> * __nonnull (^ __nonnull)(void))getter setter:(void (^ __nonnull)(NSArray<NSNumber *> * __nonnull))setter target:(NSArray<NSNumber *> * __nonnull)target OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSObject (SWIFT_EXTENSION(MotionAnimation))
- (void)m_setValues:(NSArray<NSNumber *> * __nonnull)values forCustomProperty:(NSString * __nonnull)key;
- (void)m_defineCustomProperty:(NSString * __nonnull)key initialValues:(NSArray<NSNumber *> * __nonnull)initialValues valueUpdateCallback:(void (^ __nonnull)(NSArray<NSNumber *> * __nonnull))valueUpdateCallback;
+ (NSUUID * __nonnull)m_addCallbackForAnyValueUpdated:(NSDictionary<NSObject *, NSArray<NSString *> *> * __nonnull)objects callback:(void (^ __nonnull)(NSDictionary<NSObject *, NSArray<NSString *> *> * __nonnull))callback;
+ (void)m_removeMultiValueObserver:(NSUUID * __nonnull)observerKey;
- (void)m_removeCallback:(NSString * __nonnull)key observerKey:(NSUUID * __nonnull)observerKey;
- (void)m_delay:(NSTimeInterval)time completion:(void (^ __nonnull)(void))completion;
@end


@interface NSTimer (SWIFT_EXTENSION(MotionAnimation))
@end


SWIFT_CLASS("_TtC15MotionAnimation14ValueAnimation")
@interface ValueAnimation : MotionAnimation
@property (nonatomic, copy) CGFloat (^ __nullable getter)(void);
@property (nonatomic, copy) void (^ __nullable setter)(CGFloat);
@property (nonatomic) CGFloat target;
@property (nonatomic) CGFloat velocity;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithGetter:(CGFloat (^ __nonnull)(void))getter setter:(void (^ __nonnull)(CGFloat))setter target:(CGFloat)target OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15MotionAnimation20SpringValueAnimation")
@interface SpringValueAnimation : ValueAnimation
@property (nonatomic) CGFloat threshold;
@property (nonatomic) CGFloat stiffness;
@property (nonatomic) CGFloat damping;
- (BOOL)update:(CGFloat)dt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithGetter:(CGFloat (^ __nonnull)(void))getter setter:(void (^ __nonnull)(CGFloat))setter target:(CGFloat)target OBJC_DESIGNATED_INITIALIZER;
@end


#pragma clang diagnostic pop
